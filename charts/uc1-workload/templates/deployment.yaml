apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduled-client-dpl
  namespace: {{ .Values.namespace.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduled-client
  template:
    metadata:
      annotations:
        glaciation-project.eu/energy-capacity: '{{ .Values.scheduledClient.annotations.glaciationProjectEu.resource.capacity.energy }}'
        glaciation-project.eu/network-capacity: '{{ .Values.scheduledClient.annotations.glaciationProjectEu.resource.capacity.network }}'
        glaciation-project.eu/energy-allocated: '{{ .Values.scheduledClient.annotations.glaciationProjectEu.resource.allocated.energy }}'
        glaciation-project.eu/network-allocated: '{{ .Values.scheduledClient.annotations.glaciationProjectEu.resource.allocated.network }}'
      labels:
        app: scheduled-client
    spec:
      containers:
        - name: scheduled-client
          image: {{ .Values.scheduledClient.image }}
          resources:
            requests:
              memory: '{{ .Values.scheduledClient.resources.requests.memory }}'
              cpu: '{{ .Values.scheduledClient.resources.requests.cpu }}'
              nvidia.com/gpu: {{ .Values.scheduledClient.resources.requests.nvidiaGpu }}
              ephemeral-storage: {{ .Values.scheduledClient.resources.requests.ephemeralStorage }}
            limits:
              memory: '{{ .Values.scheduledClient.resources.limits.memory }}'
              cpu: '{{ .Values.scheduledClient.resources.limits.cpu }}'
              nvidia.com/gpu: {{ .Values.scheduledClient.resources.limits.nvidiaGpu }}
              ephemeral-storage: {{ .Values.scheduledClient.resources.limits.ephemeralStorage }}
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: SPRING_KAFKA_ENABLED
              value: '{{ .Values.scheduledClient.kafkaEnabled }}'
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: SPRING_KAFKA_PRODUCER_TOPIC
              value: {{ .Values.kafka.topic }}
            - name: SPRING_KAFKA_PRODUCER_TOPIC_EXTRA
              value: {{ .Values.kafka.topicExtra }}
            - name: SPRING_SERVLET_MULTIPART_MAX-FILE-SIZE
              value: '{{ .Values.scheduledClient.multipartMaxFileSize }}'
            - name: PATH_TIMESTAMPS
              value: '{{ .Values.volume.path.timbrature }}'
            - name: PATH_TIMESTAMPS_TO-BE-ELABORATED
              value: '{{ .Values.volume.path.toBeElaborated }}'
            - name: PATH_TIMESTAMPS_ACQUIRED
              value: '{{ .Values.volume.path.acquired }}'
            - name: PATH_TIMESTAMPS_DISCARDED
              value: '{{ .Values.volume.path.discarded }}'
            - name: FIXEDRATE_WATCHING_FOLDER_SECONDS
              value: '{{ .Values.scheduledClient.watchingFolderSeconds }}'
            - name: TZ
              value: '{{ .Values.timeZone }}'
          volumeMounts:
            - name: data-mef
              mountPath: '{{ .Values.volume.mountPath }}'
      volumes:
        - name: data-mef
          persistentVolumeClaim:
            claimName: data-mef-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elaboration-timb-ms-dpl-flux-default
  namespace: {{ .Values.namespace.name }}
spec:
#  replicas: 4
  selector:
    matchLabels:
      app: elaboration-timb-ms-flux-default
  template:
    metadata:
      annotations:
        glaciation-project.eu/energy-capacity: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.capacity.energy }}'
        glaciation-project.eu/network-capacity: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.capacity.network }}'
        glaciation-project.eu/energy-allocated: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.allocated.energy }}'
        glaciation-project.eu/network-allocated: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.allocated.network }}'
      labels:
        app: elaboration-timb-ms-flux-default
        security-ring: unhardened
    spec:
      containers:
        - name: elaboration-timb-ms
          image: {{ .Values.elaborationTimbMs.image }}
          resources:
            requests:
              memory: '{{ .Values.elaborationTimbMs.resources.requests.memory }}'
              cpu: '{{ .Values.elaborationTimbMs.resources.requests.cpu }}'
              nvidia.com/gpu: {{ .Values.elaborationTimbMs.resources.requests.nvidiaGpu }}
              ephemeral-storage: {{ .Values.elaborationTimbMs.resources.requests.ephemeralStorage }}
            limits:
              memory: '{{ .Values.elaborationTimbMs.resources.limits.memory }}'
              cpu: '{{ .Values.elaborationTimbMs.resources.limits.cpu }}'
              nvidia.com/gpu: {{ .Values.elaborationTimbMs.resources.limits.nvidiaGpu }}
              ephemeral-storage: {{ .Values.elaborationTimbMs.resources.limits.ephemeralStorage }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: H2_CONSOLE
              value: '{{ .Values.elaborationTimbMs.h2Console }}'
            - name: LOG_LEVEL_JPA
              value: '{{ .Values.elaborationTimbMs.logLevelJpa }}'
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP-SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: SPRING_KAFKA_LISTENER_TOPIC
              value: {{ .Values.kafka.topic }}
            - name: PATH_TIMESTAMPS_ELABORATED
              value: '{{ .Values.volume.path.elaborated }}'
            - name: PATH_TIMESTAMPS_ACQUIRED
              value: '{{ .Values.volume.path.acquired }}'
            - name: PATH_TIMESTAMPS_DISCARDED
              value: '{{ .Values.volume.path.discarded }}'
            - name: PATH_METRICS
              value: '{{ .Values.volume.path.metrics }}'
            - name: SPRING_KAFKA_CONSUMER_GROUP-ID
              value: '{{ .Values.kafka.consumerGroup }}'
            - name: SPRING_KAFKA_LISTENER_PARTITIONS
              value: '{{ .Values.kafka.listener.partitions }}'
            - name: SPRING_KAFKA_LISTENER_CONCURRENCY
              value: '{{ .Values.kafka.listener.concurrency }}'
            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-RECORDS
              value: '{{ .Values.kafka.consumer.maxPollRecords }}'
            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-INTERVAL-MS
              value: '{{ .Values.kafka.consumer.maxPollIntervalMs }}'
            - name: TZ
              value: '{{ .Values.timeZone }}'
            - name: METRICS_ENABLED
              value: '{{ .Values.elaborationTimbMs.metricsEnabled }}'
            - name: MINIO_ENABLED
              value: '{{ .Values.elaborationTimbMs.deployment.default.minio.enabled }}'
            - name: MINIO_ENDPOINT
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.endpoint }}'
            - name: MINIO_BUCKET
              value: '{{ .Values.elaborationTimbMs.deployment.default.minio.bucket }}'
            - name: MINIO_CREDENTIALS_ACCESSKEY
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.credentials.accessKey }}'
            - name: MINIO_CREDENTIALS_SECRETKEY
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.credentials.secretKey }}'
            - name: MINIO_SUB_PATH_BUCKET
              value: '{{ .Values.elaborationTimbMs.deployment.default.minio.subPath }}'
          volumeMounts:
            - name: data-mef
              mountPath: '{{ .Values.volume.mountPath }}'
            - name: ca-bundle
              mountPath: /usr/lib/jvm/java-1.8.0-amazon-corretto/jre/lib/security/cacerts
              subPath: ca.jks
              readOnly: true
      volumes:
        - name: data-mef
          persistentVolumeClaim:
            claimName: data-mef-pvc
        - name: ca-bundle
          configMap:
            defaultMode: 422
            name: ca-bundle

      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elaboration-timb-ms-dpl-flux-encrypt
  namespace: {{ .Values.namespace.name }}
spec:
  #  replicas: 4
  selector:
    matchLabels:
      app: elaboration-timb-ms-flux-encrypt
  template:
    metadata:
      annotations:
        glaciation-project.eu/energy-capacity: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.capacity.energy }}'
        glaciation-project.eu/network-capacity: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.capacity.network }}'
        glaciation-project.eu/energy-allocated: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.allocated.energy }}'
        glaciation-project.eu/network-allocated: '{{ .Values.elaborationTimbMs.deployment.annotations.glaciationProjectEu.resource.allocated.network }}'
      labels:
        app: elaboration-timb-ms-flux-encrypt
        security-ring: hardened
    spec:
      containers:
        - name: elaboration-timb-ms
          image: {{ .Values.elaborationTimbMs.image }}
          resources:
            requests:
              memory: '{{ .Values.elaborationTimbMs.resources.requests.memory }}'
              cpu: '{{ .Values.elaborationTimbMs.resources.requests.cpu }}'
              nvidia.com/gpu: {{ .Values.elaborationTimbMs.resources.requests.nvidiaGpu }}
              ephemeral-storage: {{ .Values.elaborationTimbMs.resources.requests.ephemeralStorage }}
            limits:
              memory: '{{ .Values.elaborationTimbMs.resources.limits.memory }}'
              cpu: '{{ .Values.elaborationTimbMs.resources.limits.cpu }}'
              nvidia.com/gpu: {{ .Values.elaborationTimbMs.resources.limits.nvidiaGpu }}
              ephemeral-storage: {{ .Values.elaborationTimbMs.resources.limits.ephemeralStorage }}
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: H2_CONSOLE
              value: '{{ .Values.elaborationTimbMs.h2Console }}'
            - name: LOG_LEVEL_JPA
              value: '{{ .Values.elaborationTimbMs.logLevelJpa }}'
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP-SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: SPRING_KAFKA_LISTENER_TOPIC
              value: {{ .Values.kafka.topicExtra }}
            - name: PATH_TIMESTAMPS_ELABORATED
              value: '{{ .Values.volume.path.elaborated }}'
            - name: PATH_TIMESTAMPS_ACQUIRED
              value: '{{ .Values.volume.path.acquired }}'
            - name: PATH_TIMESTAMPS_DISCARDED
              value: '{{ .Values.volume.path.discarded }}'
            - name: PATH_METRICS
              value: '{{ .Values.volume.path.metrics }}'
            - name: SPRING_KAFKA_CONSUMER_GROUP-ID
              value: '{{ .Values.kafka.consumerGroup }}'
            - name: SPRING_KAFKA_LISTENER_PARTITIONS
              value: '{{ .Values.kafka.listener.partitions }}'
            - name: SPRING_KAFKA_LISTENER_CONCURRENCY
              value: '{{ .Values.kafka.listener.concurrency }}'
            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-RECORDS
              value: '{{ .Values.kafka.consumer.maxPollRecords }}'
            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-INTERVAL-MS
              value: '{{ .Values.kafka.consumer.maxPollIntervalMs }}'
            - name: TZ
              value: '{{ .Values.timeZone }}'
            - name: METRICS_ENABLED
              value: '{{ .Values.elaborationTimbMs.metricsEnabled }}'
            - name: MINIO_ENABLED
              value: '{{ .Values.elaborationTimbMs.deployment.encrypt.minio.enabled }}'
            - name: MINIO_ENDPOINT
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.endpoint }}'
            - name: MINIO_BUCKET
              value: '{{ .Values.elaborationTimbMs.deployment.encrypt.minio.bucket }}'
            - name: MINIO_CREDENTIALS_ACCESSKEY
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.credentials.accessKey }}'
            - name: MINIO_CREDENTIALS_SECRETKEY
              value: '{{ .Values.elaborationTimbMs.deployment.serverMinio.credentials.secretKey }}'
            - name: MINIO_SUB_PATH_BUCKET
              value: '{{ .Values.elaborationTimbMs.deployment.encrypt.minio.subPath }}'
          volumeMounts:
            - name: data-mef
              mountPath: '{{ .Values.volume.mountPath }}'
            - name: ca-bundle
              mountPath: /usr/lib/jvm/java-1.8.0-amazon-corretto/jre/lib/security/cacerts
              subPath: ca.jks
              readOnly: true
      volumes:
        - name: data-mef
          persistentVolumeClaim:
            claimName: data-mef-pvc
        - name: ca-bundle
          configMap:
            defaultMode: 422
            name: ca-bundle

      restartPolicy: Always