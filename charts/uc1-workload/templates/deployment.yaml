apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduled-client-deployment
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scheduled-client
  template:
    metadata:
      labels:
        app: scheduled-client
    spec:
      containers:
        - name: scheduled-client
          image: {{ .Values.scheduledClient.image }}
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "2Gi"
              cpu: "1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: {{ .Values.scheduledClient.service.port }}
          env:
            - name: SPRING_KAFKA_ENABLED
              value: "true"
            - name: SPRING_KAFKA_PRODUCER_BOOTSTRAP-SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: SPRING_KAFKA_PRODUCER_TOPIC
              value: {{ .Values.kafka.topic }}
            - name: SPRING_SERVLET_MULTIPART_MAX-FILE-SIZE
              value: "500MB"
            - name: PATH_TIMESTAMPS
              value: "/MEF/file/timbrature"
            - name: PATH_TIMESTAMPS_TO-BE-ELABORATED
              value: "/MEF/file/to-be-elaborated"
            - name: FIXEDRATE_WATCHING_FOLDER_SECONDS
              value: "1"
            - name: TZ
              value: "Europe/Rome"
          volumeMounts:
            - name: data-mef
              mountPath: /MEF/
      volumes:
        - name: data-mef
          persistentVolumeClaim:
            claimName: data-mef-pvc
      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elaboration-timb-ms-deployment
  namespace: {{ .Values.namespace }}
spec:
#  replicas: 4
  selector:
    matchLabels:
      app: elaboration-timb-ms
  template:
    metadata:
      labels:
        app: elaboration-timb-ms
    spec:
      containers:
        - name: elaboration-timb-ms
          image: {{ .Values.elaborationTimbMs.image }}
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "2Gi"
              cpu: "1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          env:
            - name: H2_CONSOLE
              value: "false"
            - name: LOG_LEVEL_JPA
              value: "false"
            - name: SPRING_KAFKA_CONSUMER_BOOTSTRAP-SERVERS
              value: {{ .Values.kafka.bootstrapServers }}
            - name: SPRING_KAFKA_LISTENER_TOPIC
              value: {{ .Values.kafka.topic }}
            - name: PATH_TIMESTAMPS_ELABORATED
              value: "/MEF/file/elaborated"
            - name: PATH_TIMESTAMPS_ACQUIRED
              value: "/MEF/file/completed"
            - name: PATH_TIMESTAMPS_DISCARDED
              value: "/MEF/file/discarded"
            - name: PATH_METRICS
              value: "/MEF/metrics"
            - name: SPRING_KAFKA_LISTENER_PARTITIONS
              value: {{ .Values.kafka.listenerPartitions }}
            - name: SPRING_KAFKA_LISTENER_CONCURRENCY
              value: {{ .Values.kafka.listenerConcurrency }}
            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-RECORDS
              value: "1"
            - name: TZ
              value: "Europe/Rome"
#            - name: SPRING_KAFKA_CONSUMER_MAX-POLL-INTERVAL-MS
#              value: "30000"
          volumeMounts:
            - name: data-mef
              mountPath: /MEF/
      volumes:
        - name: data-mef
          persistentVolumeClaim:
            claimName: data-mef-pvc
      restartPolicy: Always
